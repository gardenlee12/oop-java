문자열의 토큰(단어) 분리(StringTokenizer)
StringTokenizer 클래스는 c언어의 strtok 함수 기능을 제공한다.

StringTokenizer 클래스 객체를 토큰(단어)들이 들어있는 문자열 및 구분자 문자들(공백, 탭, 줄바꿈, 캐리지 리턴)로 구성된 문자열과 함께 생성한다.
남아 있는 토큰이 있는지를 hasMoreTokens()로 확인한 다음 남아 있다면 현재 토큰을 nextToken()으로 얻는다.

Scanner 클래스는 주어진 입력 문자열로부터 주어진 패턴 문자열과 매치되는 부분을 검색하여 요구받은 처리를 한다.
c언어의 scanf()함수 기능을 제공한다.
nextInt(), nextChar()등의 메소드는 입력 문자열을 기본 구분자로 분리하여 요구되는 타입의 수치로 변환하여 돌려준다.
nextLine()은 줄단위로 분리된 문자열을 돌려준다.

Scanner는 다양한 원천으로 부터 입력 문자열을 받을 수 있다.

스캐너에게도 토큰 분리 메소드가 있다.

스캐너와 파일을 보다 간편하게 연결할 수 있다(Stream 대신 파일명만 전달).
scan = new Scanner(new File("data.txt"));

스캐너에 구분지점으로 판단할 문자열 패턴을 정규식(regula expression)표현으로 등록한다.
scan.useDelimirer("[ ,t\n\r]+"); 
"[...]+" 형태는 괄호속 문자 중 하나가 한 번 이상 나오는 패턴이면 구분 지점으로 처리한다는 의미이다.
구분자 문자중 \s는 일반적으로 공백으로 인정되는 문자들을 총칭한다(공백, 탭, 줄바꿈, 캐리지 리턴).
비슷한 개념으로 '\d'는 숫자들을,'D'는 숫자가 아닌 문자들을 의미한다.

주어진 구분자 문자열 패턴으로 부닐된 토큰이 있는지를 먼저 확인한다.
while (scan.hasNext())

분리된 토큰이 존재하는 경우 현재 토큰을 얻는다.
String word = scan.next;


객체의 파일 저장
기본 타입의 변수와 마찬가지로 객체의 내용도 파일에 저장할 수 있다.

파일 저장●읽기를 원하는 객체는 Serializable 인터페이스를 구현해야 한다.

객체를 출력하는 클래스 ObjectOutputStream 객체를 바이너리 파일 출력 클래스 FileOutputSteram 객체를 기반으로 생성한다.

객체 입력을 위해 ObjectOutputStream 클래스 객체를 바이너리 파일 입력 클래스 FileInputStream 객체를 기반으로 생성한다.

객체의 읽기는 반드시 이전에 저장했던 내용을 읽어야 성공한다.


임의 접근 파일 입●출력
파일의 입출력 위치를 자유롭게 지정하여 운하는 위치에 입출력할 수 있다.

RandomAccessFile 클래스는 파일 입출력 위치 설정이 필요할 때 사용한다

Student 클래스의 name 필드 길이는 항상 일정하게 5로 설정한다.

Student 객체 하나당 11바이트(=(2+5)+4)씩 규칙적인 파일 저장이 가능하다.
writeUTF() 메소드는 문자열을 "길이 2바이트 + 문자열" 형태로 저장한다.
어느 Student 객체의 name과 age는 11의 배수되는 위치에 저장된다.

원하는 Student의 name과 age를 읽기 위해 seek() 메소드를 이용한다.
원하는 위치는 11의 배수이다.

입력 위치가 설정되면 이후의 입력은 설정된 위치부터 이루어진다.

입력뿐만 아니라, 출력의 경우에도 임의의 출력 위치를 설정한 후 출력하면 해당 위치부터 저장이 이루어진다.

