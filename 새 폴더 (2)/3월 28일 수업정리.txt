소스 파일 내 클래스 배치 

    하나의 소스 파일에 여러개의 클래스를 코딩할 수 있다.

    클래스의 배치 순서는 결과에 영향을 미치지 않는다.

소스 파일 단순 분리

    클래스를 서로 다른 소스 파일로 분리하여 코딩할 수 있다.

    컴파일을 할 때 소스파일 하나만 명시하더라도 해당 소스파일 이하에서 참조하는 모든 파일을 컴파일한다.
    참조되는 클래스의 소스파일명은 클래스명.java 형태로 일치해야 한다.
    javac STEP_04_Add_2.java Add_2.java : 가능
    javac STEP_04_Add_2.java            : 가능

    실행시에는 main이 존재하는 클래스명 하나만 명시해야한다.
    java STEP_04_Add_2 : 가능
    java STEP_04_Add_2 Add_2 : 가능 클래스명을 여러 개 명시할 경우 두번째 부터는 무시된다.
    java ./ STEP_04_Add_2 : 불가능 클래스명에 경로명 형태의 표시를 해서는 안됨
    java STEP_04_Add_2 ./ Add_2 : 불가능 

소스 파일 계층적 분리
클래스들의 그룹핑 관리나 다수 개발자 환경에 따라 소스 파일들이 서로 다른 폴더에 존재할수 있다.

    컴파일방법
    모든 소스 파일에 대한 경로명을 자세하게 명시한다.
    javac STEP_04_Add_3.java work/Add_3.java : 가능
    javac STEP_04_Add_3.java :불가능
    main클래스 소스파일 하나만 명시하고 나머지 참조할 파일들에 대해서는 위치를 알려준다.
    javac -cp work STEP_04_Add_3.java : 가능

    실행방법
    검색 위치가 주어지지 않는 경우 모든 클래스 목적 프로그램 파일이 현재 디렉터리에 존재해야한다.
    실행시에는 -cp를 사용할 경우 현재 디렉터리의 개념이 사라지고 검색 위치에서만 찾기 때문에 사용할 수 없다.
    java -cp work STEP_04_Add_3 : 현재파일이 아닌 work파일에서 목적 프로그램을 찾기 때문에 불가능하다.
    java -cp ".;work" STEP_04_Add_3 : 가능



