기본 타입과 포장 클래스 배열 정렬
배열 정렬 메소드 Arrays.Sort()는 원소간 대소 비교가 가능한 기본 타입과 포장 클래스 원소인 경우 오름차순으로 정렬한다.

int등 기본 타입이나 integer등 포장 클래스의 배열은 Arrays.Sort()를 이용하여 오름차순 정렬을 할 수 있다.
역순의 정렬은 내림차순 비교기(Comparater) 객체 colletions.reverseOrder()를 매개 변수로 명시해줌으로써 가능하다.


비교 불가능 원소 타입의 배열 정렬
원소간 대소 비교가 불가능한 경우에는 비교 인터페이스 Comparater 객체를 구현하여 넘겨주고 이를 이용하여 정렬하도록 한다.

인터페이스 Comparater에 대한 구현체를 위한 명시적 클래스를 만드는 대신, 실 매개 변수 자리에 곧바로 익명(anonymous)으로 생성하여 넘길 수 있다.

Comparater처럼 구현 메소드가 오로지 하나인 인터페이스에 대해서는 메소드 형태를 축약한 Lamda 식 표현으로 객체 생성이 가능하다.
Comparater<student>는 compare(student, student) 메소드 하나를 갖는 인터페이스이다.


비교 불가능 원소 타입의 배열 정렬('function')
원소간 대소 비교를 위해 Comparater를 직접 구현하는 대신 주어진 원소에 대하여 비교 가능한 키(비교 기준)값을 얻는 방법(함수)를 제시할 수 있다.

인터페이스 구현체의 리턴 값이 곧 객체의 메소드 리턴 값이라면 컴파일러는 더 간단한 람다 식 표현을 허용한다.


수집형 데이터 정렬(Collections.sort())
리스트 등 크기가 고정되지 않은 집단 데이터는 colletions 클래스로 정렬한다.

집단 데이터 관리 클래스로 Arrays(배열)과 colletions(수집)가 있다.

"[]" 표기를 사용하여 크기가 고정되는 배열에 대한 정렬은 Arrays.sort를 사용한다.

ArrayList등 크기가 고정되지 않은 집단 데이터는 colletions.sort로 정렬한다.

colletions 타입은 List, Set, Map 등 세가지 유형을 지원하고, 이들 각각은 다시 몇 가지 세부 타입으로 구현된다.

List 타입은 배열과 비슷한 유형으로 어느 지점에서나 삽입 삭제가 가능하다.

Set 타입은 동일 원소의 중복 삽입을 불허한다.

map 타입은 키 쌍 즉, <key, 대응값> 형태의 관리를 지원하고, 키에 대한 검색이 가능하다.

