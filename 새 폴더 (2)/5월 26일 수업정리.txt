바이트 단위 바이너리(이진:binary)입●출력
바이너리는 문자 코드가 아닌 2진 패턴의 바이트(수치0 - 255)를 의미한다.

파일에 대한 가장 저수준의 입●출력은 바이트(0x00~0xff)단위이다.
파일의 내용을 문자 코드들로 보지 않고 바이트열로 본다.
이미지, 동영상, 사운드, 실행 프로그램 등의 파일은 텍스트 파일이 아닌 바이너리 파일이라 부른다.

바이트 단위 바이너리 출력은 FileOutputStream 클래스를 사용한다.

바이트 단위 바이너리 입력은 FileInputStream 클래스를 사용한다.

바이트 단위의 입●출력에 부가 기능을 더할수록 점점 고수준 입●출력이 된다.


기본 타입별 데이터 입●출력
바이너리 파일에 int등 기본 타입 단위별 입●출력이 가능하다.

바이너리 출력 클래스인 FileOutputStream 객체를 이용하여 데이터 출력 클래스 DataOutputStream 객체를 생성한다.

DataOutputStream 클래스는 기본 타입별 출력 메소드를 제공한다.
기본 타입별 메모리 저장 내용이 비트 이미지(패턴) 그대로 출력된다.
이를테면 int는 4바이트, double는 8바이트가 출력된다.

바이너리 입력 클래스인 FileInputStream 객체를 이용하여 데이터 입력 클래스 DataInputStream 객체를 생성한다.

DataInputStream 클래스는 기본 타입별 입력 메소드를 제공한다.
입력된 애용이 해당 변수의 메모리 공간에 비트 이미지로 복사된다.
파일에 저장된 타입과 읽어들일 타입이 일치하지 않으면 예외가 낙하하거나 잘못된 갑으로 읽게 된다.
즉, 저장했던 순서 그래도 다시 읽어야 한다.


문자 단위 입●출력(텍스트 파일)
텍스트 파일에 문자 단위 입출력이 가능하다.

입 출력 되는 바이트를 수치를 넘어 문자 코드로 본다.

출력 시에는 FileWriter 클래스 객체를 사용한다.

파일 개방 및 출력 시에 IOException 예외가 낙하할 수 있다.

입력 시에는 fileReader 클래스 객체를 사용한다.


문자열(줄단위) 입●출력
문자 입●출력을 바탕으로 문자들의 연속인 문자열 입●출력이 가능하다.

BufferedWriter 클래스는 FileWriter 클래스를 바탕으로 문자 및 문자열 출력을 지원한다.

BufferedReader 클래스는 개별 문자 단위 및 줄단위 문자열 입력을 지원한다.


문자열의 토큰(단어) 분리(StringTokenizer)
StringTokenizer 클래스는 c언어의 strtok 함수 기능을 제공한다.

StringTokenizer 클래스 객체를 토큰(단어)들이 들어있는 문자열 및 구분자 문자들(공백, 탭, 줄바꿈, 캐리지 리턴)로 구성된 문자열과 함께 생성한다.
남아 있는 토큰이 있는지를 hasMoreTokens()로 확인한 다음 남아 있다면 현재 토큰을 nextToken()으로 얻는다.

Scanner 클래스는 주어진 입력 문자열로부터 주어진 패턴 문자열과 매치되는 부분을 검색하여 요구받은 처리를 한다.
c언어의 scanf()함수 기능을 제공한다.
nextInt(), nextChar()등의 메소드는 입력 문자열을 기본 구분자로 분리하여 요구되는 타입의 수치로 변환하여 돌려준다.
nextLine()은 줄단위로 분리된 문자열을 돌려준다.

Scanner는 다양한 원천으로 부터 입력 문자열을 받을 수 있다.

스캐너에게도 토큰 분리 메소드가 있다.