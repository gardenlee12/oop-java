배열 표기법
배열의 형태는 c언어와 유사하지만, 배열이 하나의 클래스라는 점에서 다르다.

배열은 동일 타입의 원소들을 저장하는 'Arrays' 클래스이다.

꾸밈자 "[]"는 c언어 스타일에 따라 배열 지시자(포인터) 뒤로 옮겨 붙일 수도 있으나 권고하지 않음.

배열 객체는 new 연산자나 '='연산자에 의해 생성한다.
new 연산자로 생성할 때에는 배열 초기값을 생략하거나, 명시할 수 있다.
'='연산자로 생성할 때에는 반드시 초기값을 명시해야 하고, 그 개수가 곧 배열의 크기가 된다.

배열 원소 접근 방법은 c언어와 동일하다.


배열 원소 타입

배열의 타입은 int등의 기본 타입 외에 포장 클래스, 일반 클래스 등 모두 가능하다.

기본 타입과 포장 클래스인 경우 배열 원소 값 참조, 생성자 매개 변수 사용 등에서 자동 포장과 자동 풀기가 작동한다.


배열 리스트('ArrayList')
객체 생성 시 크기가 결저되는 배열 클래스와 달리 ArrayList클래스는 메소드를 통한 원소의 삽입●삭제에 따라 크기를 자동으로 업데이트 한다.

ArrayList의 원소들은 서로 다른 모든 유형의 객체를 저장할 수 있다. 

ArrayList의 원소 타입으로 byte, int, float 등 기본 타입의 원소는 허용되지 않고, 클래스만이 가능하다.
기본 타입을 저장하고 싶은 경우에는 포장 클래스를 사용한다.

indexOf() 등 객체 검색시, 포장 클래스 원소는 객체의 내용을 비교하고 그 외 일반 클래스 원소는 객체의 내용이 아닌 점유 공간상 동일한 객체인가를 비교한다.

ArrayList의 new 생성자에서 "<>" 내 원소 타입이 생략되더라도 컴파일러는 앞쪽의 지시자 선언 타입으로부터 타입을 충분히 유추하여 처리할 수 있다.


배열 순회 특화 for 구문
1차원 배열 원를 차례로 하나씩 순회할 때를 위한 편리한 for 구문이 존재한다.

원소 저장용 변수는 반드시 해당 for 구문 안에서 선언 되어야 한다.
특화된 for 구문이 일반 for 구문보다 더 간단하고 명쾌하다.


배열 리스트 순회("Iterator")
배열 리스트에서는 특화된 for 구문 외에 반복자(Iterator) 사용이 가능하다.

반복자 Iterator는 만능 인터페이스 중의 하나이다.

ArrayList 클래스는 저장 내용을 반복자에 재구성하여 생성해주는 메소드 iterater를 가지고 있다.

인터페이스도 일반 클래스와 마찬가지로 자유롭게 객체를 생성하거나 지시자를 사용할 수 있다.




