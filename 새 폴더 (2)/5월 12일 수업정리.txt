c언어 스타일의 오류 체크
c언어 스타일의 오류 체크는 메소드의 리턴 값을 비교하여 이루어진다. 
따라서 메소드 리턴 값에 대한 체크를 게을리 하면 프로그램이 정상 작동하지 않는다.


자바 오류 체크 메커니즘 : 예외(exception)와 투척('throws')과 포획틀('try ~ catch')
오류 상황 시 예외 객체를 투척하면, 이후 로직 어느 곳 에서는 반드시 투척된 예외를 포획하는 틀(try {} catch {})이 존재해야 한다.

만약 투척된 예외에 대한 포획틀이 존재하지 않으면 컴파일을 통과하지 않는다.

포획틀은 예외를 투척하는 해당 메소드 내에 붙여도 되고, 해당 메서드를 떠나 다른 메소드에 설치할 수도 있다.

예외가 투척되는 순간 정상적인 실행 순서를 벗어나 거리에 관계없이 곧바로 포획틀 문장으로 점프한다.

투척할 예외 클래스는 "Exception" 클래스를 상속하여 프로그래머가 고유의 이름을 명명한다.


예외의 원거리 포획
투척된 예외는 해당 메소드 경계를 벗어나 호출 순서 상 멀리 떨어진 다른 메소드에서 포획될 수 있다.

투척된 예외 객체는 일차적으로 예외가 발생하여 투척한 해당 메소드에 낙하한다.

그러나, 예외 객체가 낙하한 메소드에서 예외를 포획하지 않을 경우, 즉 포획틀을 설치하지 않을 경우에는 
해당 메소드의 정의 부분에 낙하한 에외 객체를 포획하지 않고 호출 순서상 이전 메소드로 넘겨 다시 투척한다는 사실을 명시한다.

예외 객체를  통과 시키는 메소드에서는 더 이상 해당 오류에 대한 체크가 필요 없다.


한 포획틀에서 다종의 예외 포획
하나의 포획틀에서 여러 종류의 예외를 포획할 수 이싿.

하나의 메소드, 포획틀에서 여러 종류의 예외를 넘겨 투척, 포획할 수 있다.

모든 오류를 예외로 처리하여 포획하는 경우 더 이상 리턴 값에 의한 c언어 스타일의 오류 체크는 사라진다.


다형성에 의한 예외 식별
예외 객체로부터 어떤 예외인가를 식별할 수 있다.

포획틀에서 일차적으로 모든 종류의 예외를 포획한다.

이차적으로 에외 객체로부터 어떤 에외인지를 비교하여 식별한다.


예외 처리 공통 구문('finally{}')
예외 포획틀에 개별 예외 처리뿐 아니라, 공통 처리 파트를 설치할 수 있다.

예외 객체의 포획 여부와 관계없이 실행 순서 상 공통으로 처리할 부분이 있다면 finally {} 파트에 코딩한다.

break 대신 return이 있더라도 곧바로 리턴하는 것이 아니고, finally {} 구문을 처리한 후 리턴한다.


예외 처리 공통 구문의 필요성
예외 발생에 따라 실행 순서 상 꼭 필요한 필수 절차가 누락될 수 있다.

